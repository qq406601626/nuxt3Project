原理：
1、nuxt会根据路由和对应的组件信息，生成两份JS，一份用于服务端，一份用于客户端，两份JS内容可能不一样。
2、当浏览器发起一个路由请求时，服务器会读取服务端JS的内容，然后找到对应的路由配置，根据路由配置的组件，如果对应的组件内容中有接口请求，服务端就直接请求接口数据，然后把对应的数据和组件的JS转译渲染为html字符串然会给客户端。
3、客户端会去请求客户端那一份JS，然后找到对应的路由的JS，把服务端返回的html字符串进行双向绑定和UI框架的组件渲染。
4、之后的路由请求都通过vue-router接管。

整体过程如下：参考链接：https://juejin.cn/post/7306018529844592692?searchId=20240323212749044084C503A65ABCCE2D
// 服务端：初始化vue、render
export async function render(url, manifest) {
  // 拿到实例
  const { app, router, store } = createApp();
  try {
    // 路由跳转，在服务端渲染对应组件模板
    await router.push(url);
    // 确保初始化之后执行
    await router.isReady();
    const ctx = {};
    // 渲染模板
    const html = await renderToString(app, ctx);
    // 处理css模板等内容 内容
    const preloadLinks = renderPreloadLinks(ctx.modules, manifest);
    const teleports = renderTeleports(ctx.teleports);
    //拿到全局数据
    const state = JSON.stringify(store.state.value);
    return [html, state, preloadLinks, teleports];
  } catch (error) {
    console.log(error);
  }
}


客服端：在客户端实现在初始化一次`vue实例`激活当前`vue`应用
import { createApp } from './main';
import 'uno.css';
import '@/assets/css/index.css';
import 'element-plus/theme-chalk/base.css';
const { app, router, store } = createApp();
router.isReady().then(() => {
  app.mount('#app');
});


---------------------------------------------------------------------------------------
配置：
环境覆盖：
// $production和$development会分别用作不同开发模式下的配置
export default defineNuxtConfig({
  $production: {},
  $development: {}
})
环境变量和私有令牌：
runtimeConfig API会把环境变量这样的值暴露给应用程序的其余部分，这些值应该在nuxt.config中定义。
export default defineNuxtConfig({
  runtimeConfig: {
    // 只在服务器端可用的私有键
    apiSecret: '123',
    // public中的键也可以在客户端使用
    public: {
      apiBase: '/api'
    }
  }
})
使用：pages/index.vue
<script setup lang="ts">
const runtimeConfig = useRuntimeConfig()
</script>
应用程序配置:
app.config.ts用于设置整个项目的设置项，其中的defineAppConfig助手函数在全局范围内无需导入即可使用。
export default defineAppConfig({
  title: 'Hello Nuxt',
  theme: {
    dark: true,
    colors: {
      primary: '#ff0000'
    }
  }
})
使用：useAppConfig()
pages/index.vue:
<script setup lang="ts">
const appConfig = useAppConfig()
</script>

runtimeConfig与app.config:runtimeConfig和app.config都用于向应用程序的其余部分公开变量。runtimeConfig需要在构建后使用环境变量指定的私有或公共令牌，
app.config在构建时确定的公共令牌，网站配置（如主题变体、标题）以及不敏感的项目配置等。

配置其它插件库：
名称	    配置文件        	    如何配置
Nitro	nitro.config.ts	    在nuxt.config中使用nitro键
PostCSS	postcss.config.js	在nuxt.config中使用postcss键
Vite	vite.config.ts	    在nuxt.config中使用vite键
webpack	webpack.config.ts	在nuxt.config中使用webpack键
以下是其他常见配置文件的列表：
名称	配置文件	如何配置
TypeScript	tsconfig.json
ESLint	    .eslintrc.js
Prettier	.prettierrc.json
Stylelint	.stylelintrc.json
TailwindCSS	tailwind.config.js
Vitest	    vitest.config.ts
Vue配置：
使用 Vite，如果你需要传递选项给 @vitejs/plugin-vue 或 @vitejs/plugin-vue-jsx，你可以在你的 nuxt.config 文件中进行配置。
vite.vue    用于 @vitejs/plugin-vue。可以在这里查看可用选项。
vite.vueJsx 用于 @vitejs/plugin-vue-jsx。可以在这里查看可用选项。
nuxt.config.ts：
export default defineNuxtConfig({
  vite: {
    vue: {
      customElement: true
    },
    vueJsx: {
      mergeProps: true
    }
  }
})
启用实验性 Vue 功能，你可能需要在 Vue 中启用实验性功能，例如 defineModel 或 propsDestructure。无论你使用哪个构建工具，Nuxt 都提供了一种简单的方法在 nuxt.config.ts 中进行配置：
export default defineNuxtConfig({
  vue: {
    defineModel: true,
    propsDestructure: true
  }
})


app.vue为入口点，并为应用程序的每个路由渲染其内容。
如果你熟悉 Vue，你可能会想知道 main.js 在哪里（通常用于创建 Vue 应用的文件）。Nuxt 在幕后完成了这个操作。

components/目录中创建的组件，它们将自动在整个应用程序中可用，无需显式地导入。

pages/ 目录中的每个文件都表示一个不同的路由。
要使用页面，创建 pages/index.vue 文件并将 <NuxtPage /> 组件添加到 app.vue（或者删除 app.vue 以使用默认入口）。
现在，你可以通过在 pages/ 目录中添加新文件来创建更多页面及其对应的路由。


布局是页面的包装器，包含了多个页面的共同用户界面，如页眉和页脚。布局是使用 <slot /> 组件来显示页面内容的 Vue 文件。
layouts/default.vue 文件将被默认使用。自定义布局可以作为页面元数据的一部分进行设置。
如果你的应用程序只有一个布局，我们建议使用 app.vue 和 <NuxtPage />。
使用：
layouts/default.vue
<template>
  <div>
    <div> this is layout default header</div>
    <slot />
    <div> this is layout default footer</div>
  </div>
</template>
app.vue
<template>
  <NuxtLayout>  // 其实就相当于一个动态组件。
    <nuxt-page></nuxt-page>
  </NuxtLayout>
</template>

使用自定义插件高级定制模板内容：
你可以通过添加一个 Nitro 插件来完全控制 HTML 模板，该插件注册一个钩子函数。
render:html 钩子函数的回调函数允许你在将 HTML 发送到客户端之前对其进行修改。
server/plugins/extend-html.ts
export default defineNitroPlugin((nitroApp) => {
  nitroApp.hooks.hook('render:html', (html, { event }) => {
    // 这将是 HTML 模板的对象表示形式。
    console.log(html)
    html.head.push(`<meta name="description" content="My custom description" />`)
  })
  // 你也可以在这里拦截响应。
  nitroApp.hooks.hook('render:response', (response, { event }) => { console.log(response) })
})

public/目录中的内容会按原样作为服务器根目录下的公共资源提供。
你可以通过应用程序的代码或浏览器的根URL / 获取 public/ 目录中的文件。
例如，在 public/img/ 目录中引用一个图像文件，该文件可通过静态URL /img/nuxt.png 访问：

assets/ 目录按约定包含了你希望构建工具（Vite或webpack）处理的所有资源。
按照约定，Nuxt使用 assets/ 目录来存储这些文件，但该目录没有自动扫描功能，你可以使用任何其他名称。
在应用程序的代码中，你可以通过使用 ~/assets/ 路径来引用位于 assets/ 目录中的文件。
<template>
  <img src="~/assets/img/nuxt.png" alt="Discover Nuxt 3" />
</template>

全局样式导入：
要在你的Nuxt组件样式中全局插入语句，你可以在 nuxt.config 文件中使用 Vite 选项。
示例
在这个示例中，有一个 sass部分 文件，其中包含颜色变量，供你的Nuxt页面和组件使用。
assets/_colors.scss
export default defineNuxtConfig({
  vite: {
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: '@use "@/assets/_colors.scss" as *;'
        }
      }
    }
  }
})

引入样式资源文件：
<script>
// 使用静态导入以实现服务器端兼容性
import '~/assets/css/first.css'或者import 'animate.css'引入node_module的资源
// 注意：动态导入不兼容服务器端
import('~/assets/css/first.css')
</script>
<style>
@import url("~/assets/css/second.css");或者@import url("animate.css")引入node_module的资源
</style>

通过nuxt.config配置全局css样式：
nuxt.config.ts：Nuxt 将会将它包含在应用程序的所有页面中
export default defineNuxtConfig({
  css: ['~/assets/css/main.css']
})
或者引入node_module的资源
export default defineNuxtConfig({
  css: ['animate.css']
})

通过nuxt.config配置全局引入外部样式表：
export default defineNuxtConfig({
  app: {
    head: {
      link: [{ rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css' }]
    }
}})

在单独某个路由或者某个组件中添加样式文件：可以使用 useHead 组合式函数在代码中动态设置 head 中的值：
useHead({
  link: [{ rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css' }]
})


使用字体：通过css引入字体：
将本地字体文件放在 ~/public/ 目录中，例如 ~/public/fonts。然后可以在样式表中使用 url() 引用它们。
assets/css/main.css
@font-face {
  font-family: 'FarAwayGalaxy';
  src: url('/fonts/FarAwayGalaxy.woff') format('woff');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

页面路由规则：
1、文件夹会充当路径
2、index会充当/，和当平级的会追加文件名称作为路由
3、文件夹下的[name].vue会作为/:name追加到后面作为路由

获取路由参数：
const route = useRoute()
console.log(route.params.id)

路由中间件：
路由中间件在第一次刷新页面时是运行在服务端（在到达路由之前运行），之后都是在客户端运行。
使用中间件：
1、在路由所对应的组件中声明
2、命名路由中间件，放置在middleware/目录中，文件的名称即为中间件的名称：
middleware/auth.ts：（注意：路由中间件名称会转换为短横线分隔命名，因此someMiddleware会变成some-middleware。）
export default defineNuxtRouteMiddleware((to, from) => {
  if (isAuthenticated() === false) {
    return navigateTo('/login')
  }
})
pages/dashboard.vue：
<script setup lang="ts">
definePageMeta({
  middleware: 'auth'
})
</script>
3、全局路由中间件，放置在middleware/目录中（使用.global后缀），将在每次路由更改时自动运行。
全局中间件比命名中间件先执行。

路由验证：
1、局部验证：通过页面中的definePageMeta()的validate属性提供路由验证。如果返回false，并且找不到其他匹配项，这将导致404错误。
您还可以直接返回一个带有statusCode/statusMessage的对象以立即响应错误（其他匹配项将不会被检查）。
如果您有更复杂的用例，可以使用匿名路由中间件代替。
<script setup lang="ts">
definePageMeta({
  validate: async (route) => {
    // 检查id是否由数字组成
    return /^\d+$/.test(route.params.id)
  }
})
</script>

SEO：
export default defineNuxtConfig({
  app: {
    head: {
      charset: 'utf-8',
      viewport: 'width=device-width, initial-scale=1',
    }
  }
})
可以自定义整个应用的头部。
此方式不允许你提供响应式数据。我们建议在 app.vue 中使用 useHead()。
为了使配置更简单，可以使用快捷方式：charset 和 viewport。你还可以在 类型 中提供下面列出的任何键。

useHead：只对当前路由有效，跳转到其它路由后，其它需要再单独设置
<script setup lang="ts">
useHead({
  title: '我的应用',
  meta: [
    { name: 'description', content: '我的神奇网站。' }
  ],
  bodyAttrs: {
    class: 'test'
  },
  script: [ { innerHTML: 'console.log(\'Hello world\')' } ]
})
</script>

useSeoMeta:
seo的编写是一个字符串，现在可以用对象的形式描述：
<script setup lang="ts">
useSeoMeta({
  title: '我的神奇网站',
  ogTitle: '我的神奇网站',
  description: '这是我的神奇网站，让我来告诉你关于它的一切。',
  ogDescription: '这是我的神奇网站，让我来告诉你关于它的一切。',
  ogImage: 'https://example.com/image.png',
  twitterCard: 'summary_large_image',
})
</script>

SEO组件：
Nuxt提供了<Title>、<Base>、<NoScript>、<Style>、<Meta>、<Link>、<Body>、<Html>和<Head>组件，让你可以直接在组件的模板中与元数据进行交互。
<script setup lang="ts">
const title = ref('你好，世界')
</script>
<template>
  <div>
    <Head>
      <Title>{{ title }}</Title>
      <Meta name="description" :content="title" />
      <Style type="text/css" children="body { background-color: green; }" />
    </Head>

    <h1>{{ title }}</h1>
  </div>
</template>


标题模板：即标题设置拦截器
写在app.vue 文件中
<script setup lang="ts">
useHead({
  titleTemplate: (titleChunk) => {  // titleTemplate 可以是一个字符串，其中 %s 会被标题替换，也可以是一个函数。
    return titleChunk ? `${titleChunk} - 网站名称` : '网站名称';
  }
})
</script>
现在，如果你在你站点的另一个页面上使用 useHead 将标题设置为 我的页面，在浏览器标签中，标题将显示为 我的页面 - 网站名称。你还可以传递 null 来使用默认的站点标题。


设置useHead中资源的位置：
<script setup lang="ts">
useHead({
  script: [
    {
      src: 'https://third-party-script.com',
      // 有效选项为：'head' | 'bodyClose' | 'bodyOpen'
      tagPosition: 'bodyClose' // 将script标签附加到 <body> 标签的末尾。
    }
  ]
})
</script>

